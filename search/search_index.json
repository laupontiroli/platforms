{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Entrega Individual - Laura Pontiroli","text":"<pre><code>2025.1\n</code></pre>"},{"location":"#aluno","title":"Aluno","text":"<ul> <li>Laura Pontiroli Machado</li> </ul>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Roteiro 1 - FAST API</li> <li> Roteiro 2 - PRODUCT</li> <li> Roteiro 3 - ORDER</li> <li> Roteiro 4 - JENKINS</li> <li> Roteiro 5 - MINIKUBE</li> <li> Roteiro 6 - BOTTLENECKS</li> <li> Projeto - PROJETO DESENVOLVIDO EM DUPLA COM JULIA ALMEIDA SILVA</li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":"<p>Diagrama da arquitetura final</p> <pre><code>flowchart TD\n    %% STYLES\n    classDef external fill:#e3f2fd,stroke:#2196f3,color:#333;\n    classDef trusted fill:#e8eaf6,stroke:#3f51b5,color:#333;\n    classDef database fill:#fffde7,stroke:#fbc02d,stroke-width:2px;\n    classDef danger fill:#ffebee,stroke:#f44336,color:#000;\n\n    %% EXTERNAL LAYER\n    internet([fa:fa-globe Internet]):::external\n    api3rd([fa:fa-plug 3rd-party API]):::external\n\n    %% TRUSTED LAYER\n    subgraph \"Trusted Layer\"\n        direction TB\n        gateway([API Gateway]):::trusted\n        auth([Authentication]):::trusted\n        account([Account Service]):::trusted\n        product([Product Service]):::trusted\n        order([Order Service]):::trusted\n        exchange([Exchange Service]):::danger\n        db[(Database)]:::database\n    end\n\n    %% FLOWS (All labelled as CRUD for simplicity)\n    internet--&gt;|REQUEST|gateway\n    gateway--&gt;|CRUD|auth\n    gateway--&gt;|CRUD|account\n    gateway--&gt;|CRUD|product\n    gateway--&gt;|CRUD|order\n    gateway--&gt;|CONSULT|exchange\n\n    auth--&gt;|CRUD|account\n    account--&gt;|CRUD|db\n    product--&gt;|CRUD|db\n    order--&gt;|CRUD|db\n    order--&gt;|CRUD|product\n\n    exchange--&gt;|CONSULT|api3rd\n\n    %% LINK STYLE FOR DANGER ZONE\n    class exchange,api3rd danger\n\n    %% AGGREGATE FLOW to DB\n    account--&gt;|CRUD|db</code></pre>"},{"location":"#codigos","title":"C\u00f3digos","text":"<p>link dos reposit\u00f3rios: </p> <ul> <li>account</li> <li>account-service</li> <li>product</li> <li>product-service</li> <li>order</li> <li>order-service</li> <li>auth</li> <li>auth-service</li> <li>gateway-service</li> <li>exchange-service</li> </ul>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"projeto/main/","title":"Projeto em Dupla","text":""},{"location":"projeto/main/#grupo","title":"Grupo","text":"<ul> <li>Laura Pontiroli Machado </li> <li>Julia Almeida Silva </li> </ul>"},{"location":"projeto/main/#tarefas","title":"Tarefas","text":"<ul> <li> Tarefa 1 - AWS</li> <li> Tarefa 2 - EKS</li> <li> Tarefa 3 - TESTES</li> <li> Tarefa 4 - CI/CD</li> <li> Tarefa 5 - CUSTOS</li> <li> Tarefa 6 - PAAS</li> <li> Tarefa 7 - APRESENTA\u00c7\u00c3O</li> </ul>"},{"location":"projeto/main/#tarefa-1-e-2","title":"Tarefa 1 e 2","text":"<p>O deploy da aplica\u00e7\u00e3o foi feito com EKS. </p> <p>Aqui</p> <p></p>"},{"location":"projeto/main/#tarefa-3","title":"Tarefa 3","text":"<p>N\u00e3o fizemos!</p>"},{"location":"projeto/main/#tarefa-4","title":"Tarefa 4","text":"<p>Configuramos o pipeline de CI/CD utilizando o Jenkins, com o aux\u00edlio do Minikube para simular o ambiente Kubernetes localmente. O Jenkins foi respons\u00e1vel por automatizar os processos de build, teste e deploy da aplica\u00e7\u00e3o.</p> <p></p>"},{"location":"projeto/main/#tarefa-5","title":"Tarefa 5","text":"<p>Calculamos o custo atrav\u00e9s da AWS.   Custos</p>"},{"location":"projeto/main/#tarefa-6","title":"Tarefa 6","text":"<p>Para garantir que nossa equipe pudesse se concentrar no desenvolvimento do produto, e n\u00e3o nos desafios de infraestrutura, adotamos o modelo de Plataforma como Servi\u00e7o (PaaS). Essa escolha nos permitiu trabalhar em um ambiente altamente automatizado, onde tarefas como provisionamento de servidores, balanceamento de carga e atualiza\u00e7\u00f5es s\u00e3o gerenciadas pela pr\u00f3pria plataforma. Utilizando o Amazon EKS (Elastic Kubernetes Service), conseguimos orquestrar nossos containers com efici\u00eancia, escalar a aplica\u00e7\u00e3o de forma inteligente e manter a disponibilidade do sistema sem interven\u00e7\u00e3o manual.</p> <p>Mais do que uma conveni\u00eancia t\u00e9cnica, o uso de PaaS foi uma decis\u00e3o estrat\u00e9gica que acelerou entregas, reduziu falhas causadas por ambientes inconsistentes e aumentou a produtividade da equipe. Nossa vis\u00e3o de futuro \u00e9 transformar o sistema em um servi\u00e7o 100% baseado na nuvem, acess\u00edvel diretamente pelos usu\u00e1rios via navegador, seguindo o modelo SaaS. Assim, eliminamos qualquer barreira t\u00e9cnica para o uso da plataforma e ampliamos nosso alcance de forma escal\u00e1vel e sustent\u00e1vel.</p>"},{"location":"projeto/main/#tarefa-7","title":"Tarefa 7","text":"<p>Video da demostra\u00e7\u00e3o da API </p>"},{"location":"roteiro1/main/","title":"Roteiro 1","text":""},{"location":"roteiro1/main/#objetivo","title":"Objetivo","text":"<p>O objetivo para esse roteiro era desenvolver o microsservi\u00e7o EXCHANGE. Nele o usu\u00e1rio poderia pegar o valor de sell e de buy da convers\u00e3o de uma moeda para outra.</p>"},{"location":"roteiro1/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":""},{"location":"roteiro1/main/#tarefa-1","title":"Tarefa 1","text":"<p>Escolher api pra conex\u00e3o.</p> <p>A primeira coisa a se fazer foi escolher a api para fazer a convers\u00e3o e ver a documenta\u00e7\u00e3o da api para descobrir se ela enviava os valores necess\u00e1rios (sell e buy)</p> <p>A Api escolhida foi a AwesomeAPI.</p>"},{"location":"roteiro1/main/#tarefa-2","title":"Tarefa 2","text":"<p>Fazer a conex\u00e3o com a api e a rota do exchange em FASTAPI </p> Main.py do Exchange main.py<pre><code>from fastapi import FastAPI,Response, Header\nimport requests\nimport json\n\n\napp = FastAPI()\n\n# @app.get(\"/\")\n# async def root():\n#     return {\"message\": \"Hello World\"}\n\n@app.get(\"/exchange/{from_}/{to}\")\ndef get_exchange_rate(from_: str, to: str, id_account: str = Header()):\n    url = f'https://economia.awesomeapi.com.br/json/last/{from_}-{to}'\n    response = requests.get(url)\n    if response.status_code != 200: \n        return Response(content=json.dumps(\"Error fetching data\"), media_type=\"application/json\", status_code=500)\n    data = response.json()\n    sell = data[f\"{from_}{to}\"]['ask']\n    buy = data[f\"{from_}{to}\"]['bid']\n    date = data[f\"{from_}{to}\"][\"create_date\"]\n    content={\n        \"sell\": sell,   \n        \"buy\": buy,\n        \"date\": date,\n        \"id-account\": id_account\n    } \n    return Response(content=json.dumps(content), media_type=\"application/json\", status_code=200)\n</code></pre>"},{"location":"roteiro1/main/#tarefa-3","title":"Tarefa 3","text":"<p>Fazer o dockerfile para encaixar o programa dentro do servi\u00e7o desse jeito:</p> <pre><code>flowchart TD\n    %% STYLES\n    classDef external fill:#e3f2fd,stroke:#2196f3,color:#333;\n    classDef trusted fill:#e8eaf6,stroke:#3f51b5,color:#333;\n    classDef database fill:#fffde7,stroke:#fbc02d,stroke-width:2px;\n    classDef danger fill:#ffebee,stroke:#f44336,color:#000;\n\n    %% EXTERNAL LAYER\n    internet([fa:fa-globe Internet]):::external\n    api3rd([fa:fa-plug 3rd-party API]):::external\n\n    %% TRUSTED LAYER\n    subgraph \"Trusted Layer\"\n        direction TB\n        gateway([API Gateway]):::trusted\n        auth([Authentication]):::trusted\n        account([Account Service]):::trusted\n        exchange([Exchange Service]):::danger\n        db[(Database)]:::database\n    end\n\n    %% FLOWS (All labelled as CRUD for simplicity)\n    internet--&gt;|REQUEST|gateway\n    gateway--&gt;|CRUD|auth\n    gateway--&gt;|CRUD|account\n    gateway-.-&gt;|CONSULT|exchange\n    account --&gt; db\n\n    auth--&gt;|CRUD|account\n\n    exchange-.-&gt;|CONSULT|api3rd\n\n    %% LINK STYLE FOR DANGER ZONE\n    class exchange,api3rd danger\n</code></pre> Dockerfile do Exchange Dockerfile<pre><code># Use an official Python runtime as a parent image\nFROM python:3.10-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the requirements file into the container\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the rest of the application code into the container\nCOPY app/ .\n\n# Expose the port FastAPI will run on\nEXPOSE 8000\n\n\n# Run the FastAPI application\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <p>Tamb\u00e9m foi adicionado no compose.yaml geral esse servi\u00e7o </p> Compose.yaml Compose.yaml<pre><code>name: store\n\nservices:\n\n  db:\n    image: postgres:latest\n    hostname: db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB:-store}\n      POSTGRES_USER: ${POSTGRES_USER:-store}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    volumes:\n      - $VOLUME/postgres/store:/var/lib/postgresql/data\n    # ports:\n    #   - 5432:5432\n\n  account:\n    hostname: account\n    build:\n      context: ./account-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  auth:\n    hostname: auth\n    build:\n      context: ./auth-service\n      dockerfile: Dockerfile\n    environment:\n      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\n  gateway:\n    hostname: gateway\n    build:\n      context: ./gateway-service\n      dockerfile: Dockerfile\n    environment:\n      - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}\n    ports:\n      - 8080:8080\n\n  exchange:\n    hostname: exchange\n    build:\n      context: ./exchange-service\n      dockerfile: Dockerfile\n\n  product:\n    hostname: product\n    build:\n      context: ./product-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  order:\n    hostname: order\n    build:\n      context: ./order-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n</code></pre>"},{"location":"roteiro1/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Esse roteiro foi particulamente f\u00e1cil. O mais dificil foi entender como montar o dockerfile e adicionar ao compose geral.</p>"},{"location":"roteiro1/main/#conclusao","title":"Conclus\u00e3o","text":"<p>Com essa parte do roteiro nos aprendemos a adicionar microsservi\u00e7os e tamb\u00e9m que \u00e9 poss\u00edvel a integra\u00e7\u00e3o entre servi\u00e7os de diferentes linguagens.</p>"},{"location":"roteiro2/main/","title":"Roteiro 2","text":""},{"location":"roteiro2/main/#objetivo","title":"Objetivo","text":"<p>O objetivo para esse roteiro era desenvolver o microsservi\u00e7o PRODUCT. Nele o usu\u00e1rio poderia criar, consultar e deletar produtos no sistema.</p>"},{"location":"roteiro2/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":""},{"location":"roteiro2/main/#tarefa-1","title":"Tarefa 1","text":"<p>Criar uma API restfull para os produtos.</p> <p>A API deveria conter as seguintes rotas: </p> <p>POST /product</p> <p>Criar um produto novo</p> RequestResponse <pre><code>{\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre></p> <p>GET /product</p> <p>Consultar todos os produtos</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /product/{id}</p> <p>Consultar produto por ID.</p> Response <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>DELETE /product/{id}</p> <p>Deletar produto por ID.</p> <pre><code>Response code: 204 (no content)\n</code></pre>"},{"location":"roteiro2/main/#tarefa-2","title":"Tarefa 2","text":"<p>Separar product em product e product service para uma melhor estrutura. </p> <p>Para isso, depois de desenvolvido todo o c\u00f3digo de product, product-service precisaria ter a dependencia no projeto product. </p> pom.xml do product-serviceResource - (implementa\u00e7\u00e3o do controller) pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> ProductResource.java<pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ProductResource implements ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; create(ProductIn productIn) {\n        Product created_product = productService.create(ProductParser.to(productIn));\n        return ResponseEntity.ok()\n            .body(ProductParser.to(created_product));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(productService.findAll().stream().map(ProductParser::to).toList());\n    }\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; findById(String idProduct) {\n        return ResponseEntity.ok().body(ProductParser.to(productService.findById(idProduct)));\n    }\n    @Override\n    public ResponseEntity&lt;Void&gt; deleteById(String idProduct) {\n        productService.deleteById(idProduct);\n        return ResponseEntity.noContent().build();\n    }\n\n}\n</code></pre>"},{"location":"roteiro2/main/#tarefa-3","title":"Tarefa 3","text":"<p>Adicionar A API dentro do servi\u00e7o Para que se encaixasse no seguinte esquema</p> <pre><code>flowchart TD\n    %% STYLES\n    classDef external fill:#e3f2fd,stroke:#2196f3,color:#333;\n    classDef trusted fill:#e8eaf6,stroke:#3f51b5,color:#333;\n    classDef database fill:#fffde7,stroke:#fbc02d,stroke-width:2px;\n    classDef danger fill:#ffebee,stroke:#f44336,color:#000;\n\n    %% EXTERNAL LAYER\n    internet([fa:fa-globe Internet]):::external\n    api3rd([fa:fa-plug 3rd-party API]):::external\n\n    %% TRUSTED LAYER\n    subgraph \"Trusted Layer\"\n        direction TB\n        gateway([API Gateway]):::trusted\n        auth([Authentication]):::trusted\n        account([Account Service]):::trusted\n        product([Account Service]):::trusted\n        exchange([Exchange Service]):::danger\n        db[(Database)]:::database\n    end\n\n    %% FLOWS (All labelled as CRUD for simplicity)\n    internet--&gt;|REQUEST|gateway\n    gateway--&gt;|CRUD|auth\n    gateway--&gt;|CRUD|account\n    gateway--&gt;|CONSULT|exchange\n    gateway-.-&gt;|CONSULT|product\n    account --&gt; db\n    product -.-&gt; db\n\n    auth--&gt;|CRUD|account\n\n    exchange--&gt;|CONSULT|api3rd\n\n    %% LINK STYLE FOR DANGER ZONE\n    class exchange,api3rd danger\n</code></pre> Compose.yamlResource - (implementa\u00e7\u00e3o do controller) Compose.yaml<pre><code>name: store\n\nservices:\n\n  db:\n    image: postgres:latest\n    hostname: db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB:-store}\n      POSTGRES_USER: ${POSTGRES_USER:-store}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    volumes:\n      - $VOLUME/postgres/store:/var/lib/postgresql/data\n    # ports:\n    #   - 5432:5432\n\n  account:\n    hostname: account\n    build:\n      context: ./account-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  auth:\n    hostname: auth\n    build:\n      context: ./auth-service\n      dockerfile: Dockerfile\n    environment:\n      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\n  gateway:\n    hostname: gateway\n    build:\n      context: ./gateway-service\n      dockerfile: Dockerfile\n    environment:\n      - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}\n    ports:\n      - 8080:8080\n\n  exchange:\n    hostname: exchange\n    build:\n      context: ./exchange-service\n      dockerfile: Dockerfile\n\n  product:\n    hostname: product\n    build:\n      context: ./product-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  order:\n    hostname: order\n    build:\n      context: ./order-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n</code></pre> ProductResource.java<pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ProductResource implements ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; create(ProductIn productIn) {\n        Product created_product = productService.create(ProductParser.to(productIn));\n        return ResponseEntity.ok()\n            .body(ProductParser.to(created_product));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(productService.findAll().stream().map(ProductParser::to).toList());\n    }\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; findById(String idProduct) {\n        return ResponseEntity.ok().body(ProductParser.to(productService.findById(idProduct)));\n    }\n    @Override\n    public ResponseEntity&lt;Void&gt; deleteById(String idProduct) {\n        productService.deleteById(idProduct);\n        return ResponseEntity.noContent().build();\n    }\n\n}\n</code></pre>"},{"location":"roteiro2/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Esse roteiro foi um pouco mais complicado que o anterior, necessitando entender a estrutura do account e account-service para poder replicar ela para o product. </p>"},{"location":"roteiro2/main/#conclusao","title":"Conclus\u00e3o","text":"<p>Com essa parte do roteiro nos aprendemos a replicar a estrutura de um servi\u00e7o para um outro servi\u00e7o. </p>"},{"location":"roteiro3/main/","title":"Roteiro 3","text":""},{"location":"roteiro3/main/#objetivo","title":"Objetivo","text":"<p>O objetivo para esse roteiro era desenvolver o microsservi\u00e7o ORDER. Nele o usu\u00e1rio poderia criar, consultar e deletar orders no sistema feitos pelo mesmo usu\u00e1rio.</p>"},{"location":"roteiro3/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":""},{"location":"roteiro3/main/#tarefa-1","title":"Tarefa 1","text":"<p>Criar uma API restfull para orders.</p> <p>A API deveria conter as seguintes rotas: </p> <p>POST /order</p> <p>Criar um novo order a partir do usuario atual</p> RequestResponse <pre><code>{\n    \"items\": [\n        {\n            \"idProduct\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idProduct\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 1\n        }\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), if the product does not exist.\n</code></pre></p> <p>GET /order</p> <p>Consultar todos os order do usuario atual</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /order/{id}</p> <p>Obtenha os detalhes de um order pelo seu ID. O order deve pertencer ao usu\u00e1rio atual, caso contr\u00e1rio, retorne um <code>404</code>.</p> Response <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), if the order does not belong to the current user.\n</code></pre></p>"},{"location":"roteiro3/main/#tarefa-2","title":"Tarefa 2","text":"<p>Separar order em order e order-service para uma melhor estrutura. </p> <p>Para isso, depois de desenvolvido todo o c\u00f3digo de order, order-service precisaria ter a dependencia no projeto order-service. </p> pom.xml do order-service pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;order&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre>"},{"location":"roteiro3/main/#tarefa-3","title":"Tarefa 3","text":"<p>Adicionar A API dentro do servi\u00e7o Para que se encaixasse no seguinte esquema</p> <pre><code>flowchart TD\n    %% STYLES\n    classDef external fill:#e3f2fd,stroke:#2196f3,color:#333;\n    classDef trusted fill:#e8eaf6,stroke:#3f51b5,color:#333;\n    classDef database fill:#fffde7,stroke:#fbc02d,stroke-width:2px;\n    classDef danger fill:#ffebee,stroke:#f44336,color:#000;\n\n    %% EXTERNAL LAYER\n    internet([fa:fa-globe Internet]):::external\n    api3rd([fa:fa-plug 3rd-party API]):::external\n\n    %% TRUSTED LAYER\n    subgraph \"Trusted Layer\"\n        direction TB\n        gateway([API Gateway]):::trusted\n        auth([Authentication]):::trusted\n        account([Account Service]):::trusted\n        product([Product Service]):::trusted\n        order([Order Service]):::trusted\n        exchange([Exchange Service]):::danger\n        db[(Database)]:::database\n    end\n\n    %% FLOWS (All labelled as CRUD for simplicity)\n    internet--&gt;|REQUEST|gateway\n    gateway--&gt;|CRUD|auth\n    gateway--&gt;|CRUD|account\n    gateway--&gt;|CRUD|product\n    gateway--&gt;|CRUD|order\n    gateway--&gt;|CONSULT|exchange\n\n    auth--&gt;|CRUD|account\n    account--&gt;|CRUD|db\n    product--&gt;|CRUD|db\n    order--&gt;|CRUD|db\n    order--&gt;|CRUD|product\n\n    exchange--&gt;|CONSULT|api3rd\n\n    %% LINK STYLE FOR DANGER ZONE\n    class exchange,api3rd danger\n\n    %% AGGREGATE FLOW to DB\n    account--&gt;|CRUD|db</code></pre> Compose.yamlResource - (implementa\u00e7\u00e3o do controller) Compose.yaml<pre><code>name: store\n\nservices:\n\n  db:\n    image: postgres:latest\n    hostname: db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB:-store}\n      POSTGRES_USER: ${POSTGRES_USER:-store}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    volumes:\n      - $VOLUME/postgres/store:/var/lib/postgresql/data\n    # ports:\n    #   - 5432:5432\n\n  account:\n    hostname: account\n    build:\n      context: ./account-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  auth:\n    hostname: auth\n    build:\n      context: ./auth-service\n      dockerfile: Dockerfile\n    environment:\n      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\n  gateway:\n    hostname: gateway\n    build:\n      context: ./gateway-service\n      dockerfile: Dockerfile\n    environment:\n      - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}\n    ports:\n      - 8080:8080\n\n  exchange:\n    hostname: exchange\n    build:\n      context: ./exchange-service\n      dockerfile: Dockerfile\n\n  product:\n    hostname: product\n    build:\n      context: ./product-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  order:\n    hostname: order\n    build:\n      context: ./order-service\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n</code></pre> OrderResource.java<pre><code>package store.order;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport store.account.AccountOut;\n\n@RestController\npublic class OrderResource implements OrderController{\n\n    @Autowired\n    private OrderService orderService;\n\n    @Override\n    public ResponseEntity&lt;OrderOut&gt; create(String idAccount, OrderIn orderIn) {\n        Order orderDomain = OrderParser.to(orderIn)\n            .user(AccountOut.builder().id(idAccount).build());\n        Order created = orderService.create(orderDomain);\n        return ResponseEntity.ok().body(OrderParser.to(created));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;OrderOut&gt;&gt; findAll(String idAccount) {\n        return ResponseEntity\n            .ok()\n            .body(orderService.findAll(idAccount).stream().map(OrderParser::to).toList());\n    }\n\n    @Override\n    public ResponseEntity&lt;OrderOut&gt; findOrder(String idAccount, String id) {\n        Order order = orderService.findById(idAccount, id);\n        return ResponseEntity.ok().body(\n            OrderParser.to(order)\n        );\n    }\n\n    @Override\n    public void deleteOrder(String idAccount, String id) {\n        orderService.deleteOrder(id);\n    }\n}\n</code></pre>"},{"location":"roteiro3/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Esse roteiro foi o mais complicado de todos. Al\u00e9m de desenvolver o order e order-service, foi necess\u00e1rio integrar com o product tamb\u00e9m para poder puxar os dados dos produtos adicionados e fazer as contas do total etc.</p>"},{"location":"roteiro3/main/#conclusao","title":"Conclus\u00e3o","text":"<p>Com essa parte do roteiro podemos interagir mais como integra\u00e7\u00e3o de microsservi\u00e7os e comunica\u00e7\u00e3o entre os servi\u00e7os, entender como essa comunica\u00e7\u00e3o funciona e como interagir com outro servi\u00e7o.</p>"},{"location":"roteiro4/main/","title":"Roteiro 4","text":""},{"location":"roteiro4/main/#objetivo","title":"Objetivo","text":"<p>O objetivo para esse roteiro era adicionar o nosso servi\u00e7o no Jenkins. O jenkins \u00e9 uma ferramenta para CI/CD (continious integration, continious deployment). Ela faz com que o deploy seja autom\u00e1tico apartir da atualiza\u00e7\u00e3o da implementa\u00e7\u00e3o.</p>"},{"location":"roteiro4/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":""},{"location":"roteiro4/main/#tarefa-1","title":"Tarefa 1","text":"<p>Criar uma conta no Jenkins. </p> <p>Para isso foi necess\u00e1rio rodar o seguinte compose: </p> Compose Jenkins Jenkinsfile<pre><code># docker compose up -d --build --force-recreate\nname: ops\n\nservices:\n\n  jenkins:\n    container_name: jenkins\n    build:\n      dockerfile_inline: |\n        FROM jenkins/jenkins:jdk21\n        USER root\n\n        # Install tools\n        RUN apt-get update &amp;&amp; apt-get install -y lsb-release iputils-ping maven\n\n        # Install Docker\n        RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\n          https://download.docker.com/linux/debian/gpg\n        RUN echo \"deb [arch=$(dpkg --print-architecture) \\\n          signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\n          https://download.docker.com/linux/debian \\\n          $(lsb_release -cs) stable\" &gt; /etc/apt/sources.list.d/docker.list\n        RUN apt-get update &amp;&amp; apt-get install -y docker-ce\n\n        # Install kubectl\n        RUN apt-get install -y apt-transport-https ca-certificates curl\n        RUN curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list\n        RUN chmod 644 /etc/apt/sources.list.d/kubernetes.list\n        RUN apt-get update &amp;&amp; apt-get install -y kubectl\n\n        RUN usermod -aG docker jenkins\n    ports:\n      - 9080:8080\n      - 50000:50000\n    volumes:\n      - ${CONFIG:-./config}/jenkins:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n</code></pre> <p>Assim criamos a imagem do jenkins no nosso docker para poder subir os servi\u00e7os </p>"},{"location":"roteiro4/main/#tarefa-2","title":"Tarefa 2","text":"<p>Adicionar os arquivos do jenkins em todos os servi\u00e7os. Seguindo o seguinte padr\u00e3o:</p> Jenkinsfile do gateway Jenkinsfile<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'gateway'\n        NAME = \"laupontiroli/${env.SERVICE}\"\n    }\n    stages {\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n        // stage('Deploy') { \n        //     steps {\n        //         sh 'kubectl apply -f k8s/service.yaml'\n        //         sh 'kubectl apply -f k8s/deployment.yaml'\n        //     }\n        // }  \n    }\n}\n</code></pre>"},{"location":"roteiro4/main/#tarefa-3","title":"Tarefa 3","text":"<p>Subir todos os servi\u00e7os e reposit\u00f3rios como itens no Jenkins e ver se est\u00e1 tudo certo </p> <p></p>"},{"location":"roteiro4/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Esse roteiro N\u00e3o foi t\u00e3o complicado como os outros, uma vez que voc\u00ea entende todos os arquivos q precisam existir e aonde adicionar as coisas certas.</p>"},{"location":"roteiro4/main/#conclusao","title":"Conclus\u00e3o","text":"<p>Jenkins \u00e9 uma \u00f3tima ferramenta pra organizar projetos, especialmente quando temoss diferentes servi\u00e7os que interagem com outros.</p>"},{"location":"roteiro5/main/","title":"Roteiro 5","text":""},{"location":"roteiro5/main/#objetivo","title":"Objetivo","text":"<p>O objetivo para esse roteiro era adicionar o MiniKube(Kubernets) para o nosso servi\u00e7o. O Kubernetes \u00e9 uma plataforma que orquestra containers, automatizando sua implanta\u00e7\u00e3o e gerenciamento. O MiniKube \u00e9 sua vers\u00e3o local para desenvolvimento.</p>"},{"location":"roteiro5/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":""},{"location":"roteiro5/main/#tarefa-1","title":"Tarefa 1","text":"<p>Baixar o Minkube pelo homebrew</p> <p>Para isso, como eu j\u00e1 tinha homebrew instalado, s\u00f3 tive que rodar <code>% brew install minikube</code></p> <p>Depois disso, rodei o minikube para gerar o cluster no meu docker </p> <p></p> <p>E rodar a imagem no terminal com <code>minikube start</code></p> <p></p> <p>Assim criamos a imagem do minikube no nosso docker e podemos subir os servi\u00e7os nele.</p>"},{"location":"roteiro5/main/#tarefa-2","title":"Tarefa 2","text":"<p>Adicionar os nossos servi\u00e7os todos os reposit\u00f3rios service no Minikube</p> <p>Para isso foi necess\u00e1rio criar as pastas <code>k8s</code> em todos os services no seguinte formato. </p> <p>Exemplo no Account Service</p> <pre><code>\ud83d\udcc1 account-service\n\u2514\u2500\u2500 \ud83d\udcc1 k8s\n    \u2514\u2500\u2500 \ud83d\udcc4 service.yaml\n</code></pre> service.yaml <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n    name: account\n    labels:\n        app: account\nspec:\n    type: ClusterIP\n    ports:\n        - port: 8080\n    selector:\n        app: account\n</code></pre> <p><code>{ .bash .copy .select } kubectl apply -f ./k8s/service.yaml kubectl get services</code> --&gt;</p> <p>Onde os arquivos k8s.yaml variam pra necessidade de cada servi\u00e7o. </p>"},{"location":"roteiro5/main/#tarefa-3","title":"Tarefa 3","text":"<p>Depois de criar esses arquivos e rodar minikube start, foi necess\u00e1rio entrar em todas essas pastas e adicionar cada arquivo yaml com <code>kubectl apply -f &lt;filename.yaml&gt;</code></p> <p>depois de rodar todos, verifiquei que eles estavam no minikube com o comando <code>kubeclt get pods</code></p> <p></p>"},{"location":"roteiro5/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Esse roteiro foi parecido com o Jenkins em rela\u00e7\u00e3o a dificuldade. Uma vez ententendo o passo a passo foi tranquilo porque s\u00e3o arquivos de configura\u00e7\u00e3o prontos, mas precisa entender todo o processo.</p>"},{"location":"roteiro5/main/#conclusao","title":"Conclus\u00e3o","text":"<p>O kubernets \u00e9 uma \u00f3tima ferramenta para adicionar em projetos grandes que podem demandar mais de uma imagem devido a demanda pelo servi\u00e7o.</p>"}]}